import { useState } from 'react';
import { usePaymentCreationMutation } from "@/lib/store/features/api/authApi";
import { useAppSelector } from "@/lib/store/hooks";
import { useForm, SubmitHandler } from "react-hook-form";
import { toast } from "sonner";
import PaymentRequested from "./PaymentRequested";
import Image from "next/image";
import Link from "next/link";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import PaymentSuccesfulModal from '../share/modal/PaymentSuccesfulModal';

export type Inputs = {
  FromNumber: string;
  ToNumber?: string;
  Amount: number;
  transactionId: string;
};

const ProfileDetals = () => {
  const { user } = useAppSelector((state) => state.auth);
  const [isFirstModalOpen, setIsFirstModalOpen] = useState(false);
  const [isSecondModalOpen, setIsSecondModalOpen] = useState(false);
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);
  const [paymentDetails, setPaymentDetails] = useState<Inputs | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<Inputs>();

  const [paymentCreation, { isLoading }] = usePaymentCreationMutation();

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    try {
      console.log(data)
      const result = await paymentCreation(data).unwrap();
      toast.success(result?.message || "‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
      setPaymentDetails(data);
      setIsSecondModalOpen(false);
      setIsSuccessModalOpen(true);
      reset();
    } catch (error: unknown) {
      console.error("‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá", error);
      toast.error("‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
  };

  return (
    <div className="w-full h-full flex justify-center items-center flex-col gap-8">
      {/* ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶ï‡¶æ‡¶∞‡ßç‡¶° */}
      <div className="w-full md:w-1/2 bg-gray-800 rounded-lg">
        <div className="w-full overflow-hidden rounded-lg shadow-lg bg-gray-800">
          <Image
            className="object-cover object-center w-full h-56 rounded-full"
            width={300}
            height={300}
            src={user?.photo || "/default-avatar.jpg"}
            alt="‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶õ‡¶¨‡¶ø"
          />

          <div className="flex items-center px-6 py-3 bg-gray-900">
            <h1 className="mx-3 text-lg font-semibold text-white capitalize">
              TTO ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ
            </h1>
          </div>

          <div className="px-6 py-4">
            <h1 className="text-xl font-semibold text-white capitalize">
              {user?.name}
            </h1>

            <p className="py-2 text-gray-400">
              {user?.status === "Active" 
                ? "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
                : "‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"}
            </p>

            <div className="flex items-center mt-4 text-gray-200">
              <h1 className="px-2 text-sm">‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {user?.status}</h1>
              <span className={user?.status === "Active" ? "text-green-500" : "text-red-500"}>
                {user?.status === "Active" ? "üü¢" : "üî¥"}
              </span>
            </div>

            <div className="flex items-center mt-4 text-gray-200">
              <h1 className="px-2 text-sm">‡¶Ü‡¶Ø‡¶º: ‡ß≥{user?.earnings?.toFixed(2)}</h1>
            </div>

            <div className="flex items-center mt-4 text-gray-200">
              <h1 className="px-2 text-sm break-all">{user?.email}</h1>
            </div>

            <div className="flex items-center mt-4 text-gray-200">
              <h1 className="px-2 text-sm">
                ‡¶∞‡ßá‡¶´‡¶æ‡¶∞‡ßá‡¶≤ ‡¶ï‡ßã‡¶°: {" "}
                <span className="text-emerald-400 font-mono">
                  {user?.referalCode}
                </span>
              </h1>
            </div>

            {user && user?.pakageLink?.length > 0 && (
              <div className="mt-4 space-y-2">
                {user.pakageLink.map((link) => (
                  <Link
                    key={link._id}
                    href={link.link}
                    className="px-2 text-emerald-400 hover:text-emerald-300 break-all"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    ‡¶™‡ßç‡¶Ø‡¶æ‡¶ï‡ßá‡¶ú ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï: {link.link}
                  </Link>
                ))}
              </div>
            )}

            {/* ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡¶æ‡¶ü‡¶® */}
            {user?.status !== "Active" && (
              <div className="mt-6">
                <Dialog open={isFirstModalOpen} onOpenChange={setIsFirstModalOpen}>
                  <DialogTrigger asChild>
                    <Button className="w-full bg-green-600 hover:bg-green-700 text-lg">
                      ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡ßÅ‡¶®
                    </Button>
                  </DialogTrigger>
                  
                  {/* ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Æ‡ßã‡¶°‡¶æ‡¶≤ - ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ */}
                  <DialogContent className="bg-gray-800 text-white max-w-md">
                    <DialogHeader>
                      <DialogTitle className="text-2xl text-center mb-4">
                        ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠‡ßá‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ
                      </DialogTitle>
                    </DialogHeader>
                    <div className="space-y-6">
                      <div className="text-center">
                        <p className="text-gray-300 mb-4">
                          ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡ß≥‡ßß‡ß¶‡ß¶ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®:
                        </p>
                        <div className="space-y-3 font-mono">
                          <p>‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂: 01795944731</p>
                          <p>‡¶®‡¶ó‡¶¶: 01795944731</p>
                          <p>‡¶∞‡¶ï‡ßá‡¶ü: 01795944731</p>
                        </div>
                      </div>
                      <div className="flex flex-col gap-3">
                        <Button 
                          onClick={() => {
                            setIsFirstModalOpen(false);
                            setIsSecondModalOpen(true);
                          }}
                          className="w-full bg-green-600 hover:bg-green-700"
                        >
                          ‡¶Ü‡¶Æ‡¶ø ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡¶ø - ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ
                        </Button>
                        <Button
                          variant="outline"
                          onClick={() => setIsFirstModalOpen(false)}
                          className="w-full text-gray-300 hover:bg-gray-700"
                        >
                          ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
                        </Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶∞‡ßç‡¶Æ ‡¶Æ‡ßã‡¶°‡¶æ‡¶≤ */}
      <Dialog open={isSecondModalOpen} onOpenChange={setIsSecondModalOpen}>
        <DialogContent className="bg-gray-800 text-white max-w-md">
          <DialogHeader>
            <DialogTitle className="text-2xl text-center mb-4">
              ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£
            </DialogTitle>
          </DialogHeader>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <div className="space-y-4">
              <div>
                <input
                  type="text"
                  placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞"
                  className="w-full p-3 bg-gray-700 rounded-lg placeholder-gray-400"
                  {...register("FromNumber", { 
                    required: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
                    minLength: {
                      value: 11,
                      message: "‡¶¨‡ßà‡¶ß ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßÄ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá"
                    }
                  })}
                />
                {errors.FromNumber && (
                  <span className="text-red-400 text-sm mt-1">
                    {errors.FromNumber.message}
                  </span>
                )}
              </div>
              <div>
                <input
                  type="text"
                  placeholder="‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø"
                  className="w-full p-3 bg-gray-700 rounded-lg placeholder-gray-400"
                  {...register("transactionId", { 
                    required: "‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡¶ú‡ßá‡¶ï‡¶∂‡¶® ‡¶Ü‡¶á‡¶°‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
                  })}
                />
                {errors?.transactionId && (
                  <span className="text-red-400 text-sm mt-1">
                    {errors?.transactionId?.message}
                  </span>
                )}
              </div>

              <div>
                <input
                  type="text"
                  placeholder="‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ (‡ß¶‡ßß‡ß≠‡ßØ‡ß´‡ßØ‡ß™‡ß™‡ß≠‡ß©‡ßß)"
                  className="w-full p-3 bg-gray-700 rounded-lg placeholder-gray-400"
                  {...register("ToNumber", { 
                    required: "‡¶∞‡¶ø‡¶∏‡¶ø‡¶≠‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
                  })}
                />
                {errors.ToNumber && (
                  <span className="text-red-400 text-sm mt-1">
                    {errors.ToNumber.message}
                  </span>
                )}
              </div>

              <div>
                <input
                  type="number"
                  placeholder="‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ (‡ß≥‡ßß‡ß¶‡ß¶)"
                  className="w-full p-3 bg-gray-700 rounded-lg placeholder-gray-400"
                  {...register("Amount", { 
                    required: "‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®",
                    min: {
                      value: 100,
                      message: "‡¶®‡ßç‡¶Ø‡ßÇ‡¶®‡¶§‡¶Æ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡ß≥‡ßß‡ß¶‡ß¶"
                    }
                  })}
                />
                {errors.Amount && (
                  <span className="text-red-400 text-sm mt-1">
                    {errors.Amount.message}
                  </span>
                )}
              </div>
            </div>

            <div className="flex flex-col gap-3">
              <Button 
                type="submit" 
                className="w-full bg-green-600 hover:bg-green-700"
                disabled={isLoading}
              >
                {isLoading ? (
                  <span className="animate-pulse">‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ï‡¶∞‡¶£ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</span>
                ) : (
                  "‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®"
                )}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsSecondModalOpen(false)}
                className="w-full text-gray-300 hover:bg-gray-700"
              >
                ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

        {/* ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤ ‡¶Æ‡ßã‡¶°‡¶æ‡¶≤ */}
        <PaymentSuccesfulModal
        paymentDetails={paymentDetails}
        open={isSuccessModalOpen}
        onOpenChange={setIsSuccessModalOpen}
      />

      {/* ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü */}
      {user?.status === "Active" && (
        <div className="w-full md:w-1/2 space-y-8">
          {Number(user?.earnings) > 0 && <PaymentRequested />}
        </div>
      )}
    </div>
  );
};

export default ProfileDetals;